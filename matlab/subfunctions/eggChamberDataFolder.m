classdef eggChamberDataFolder < handle
% class that handles the file addresses from a dataset of eggchamber images.

% from the expected root folder (inFolder property) architecture below, 
% the object collects the addresses of the conditions and samples folders, 
% under the conditionNames and sampleNames properties.

% -input folder (arbitrary name, stored in inFolder property)
%   - condition1 (arbitrary name, stored in conditionNames{1} property)
%       - eggChamber1 (arbitrary name, stored in sampleNames{1}{1})
%           - "eggChamberCSV" 
%           - "eggChamberTIF" 
%       - eggChamber2 (arbitrary name, stored in sampleNames{1}{2})
%           - "eggChamberCSV" 
%           - "eggChamberTIF" 
%   - condition2 (stored in conditionNames{2} property)
%       - eggChamber1 (arbitrary name, stored in sampleNames{2}{1})
%           - "eggChamberCSV" 
%           - "eggChamberTIF" 
%       - eggChamber2 (arbitrary name, stored in sampleNames{2}{2})
%           - "eggChamberCSV" 
%           - "eggChamberTIF" 


% the method collectConditionsAndSamples then loads all the data tables for
% each condition/sample/channel and combines them all in a unique data
% table, with columns condIdx, sampleIdx to enable groupling of the nuclei
% by origin. Other columns of the table are the data columns of the
% original tables generated by Fiji.

% example use: 
% ec = eggChamberDataFolder(inputDataFolder); sets up all the properties

% t = ec.loadAllEggChamberData(); % the output is a datatable t.
% t can then be converted into a eggChamberDataTable for easy plotting and
% data manipulation using ect = eggChamberDataTable(t);

properties (GetAccess = 'public', SetAccess = 'public')
    inFolder;
    conditionNames;
    nConditions;
    sampleNames;
    nSamples;
    eggChamberSegChannel = 0;
end

properties (GetAccess = 'private', SetAccess = 'private')

    %  name of the subfolder where the egg chamber data is stored
    eggChamberCsvFolderName = 'eggChamberCSV';

    % name of the subfolder where the 2D segmentations of the egg chambers are stored
    % should hold a file called eggChamberStages.csv - it is optional.
    eggChamberSegFolderName = 'eggChamberSEG';
    eggChamberSegFileName = 'eggChamberStages.csv';

    % file names (of name base in the case of channel dependent file names)
    eggChamberWiseFileNames = {'allNucGeom.csv';...
        '_allNucInt.csv';...
        '_wholeImgInt.csv';...
        '_eggChamberInt.csv'};

    % whether each file name of the previous list is channel dependent or not
    eggChamberWiseChannelDependent = logical([0;...
        1;...
        1;...
        1;]);

    % whether each file name of the previous list contains a single row (whole image data) or
    % one row per nucleus
    eggChamberWiseSingleRow = logical([0;...
        0;...
        1;...
        1;]);
    
    % prefix to add in front of each variable name when loading the
    % corresponding table
    eggChamberWisePrefix ={'nuc';...
        'nuc';...
        'wholeImg';...
        'eggChamber'};

    % prefix to add at the end of each variable name when loading the
    % corresponding table
    eggChamberWiseSuffix ={'';...
        '_raw';...
        '_raw';...
        '_raw'};
end

methods (Access = 'public')
    %% initialize object from input root folder
    function obj = eggChamberDataFolder(inputFolder)
        obj.inFolder = inputFolder;
        obj.collectConditionsAndSamples;
    end
    
    %% load data from all conditions into data table
    function ect = loadAllEggChamberData(obj)
        warning('off','MATLAB:table:ModifiedAndSavedVarnames'); % mute unneeded warnings
        removeNeighbors = 1; % exclude from the data import the variables with neighbor in their name - we do not use them.
        t = [];
        for i=1:obj.nConditions
            for j=1:obj.nSamples(i)
                disp(['Loading data from condition ',obj.conditionNames{i},...
                    ', sample ',obj.sampleNames{i}{j},' ...']);
                t = obj.combineEcTables(t, loadEggChamberData(obj,i,j,removeNeighbors));
                ect = eggChamberDataTable(t,obj);
            end
        end
        disp('done.');
    end
end

methods (Access = 'private')
    
    %% collect names of samples and conditions folders
    function obj = collectConditionsAndSamples(obj,varargin)
        if ~isempty(varargin)
            obj.inFolder = varargin{1};
        end

        % collect conditions, i.e. list of subfolders from input folder
        d = dir(obj.inFolder);
        dFolders = d([d(:).isdir]);
        dFolders = dFolders(~ismember({dFolders(:).name},{'.','..'}));
        obj.conditionNames = {dFolders(:).name};
        obj.conditionNames = reshape(obj.conditionNames,...
            numel(obj.conditionNames),1);
        obj.nConditions = numel(dFolders);

        % for each condition, collect samples, i.e. list of subfolders
        % within each condition folder:
        for i=1:obj.nConditions
            d = dir(fullfile(obj.inFolder, obj.conditionNames{i}));
            dFolders = d([d(:).isdir]);
            dFolders = dFolders(~ismember({dFolders(:).name},{'.','..'}));
            obj.sampleNames{i,1} = {dFolders(:).name};
            obj.sampleNames{i,1} = reshape(obj.sampleNames{i},...
                numel(obj.sampleNames{i}),1);
            obj.nSamples(i,1) = numel(dFolders);
        end
    end

    %% get the condition Idx from the name of a condition folder 
    function conditionIdx = getConditionIdx(obj,cName)
        conditionIdx = find(ismember( obj.conditionNames,cName));
    end
    
    %% get the condition and sample Idx from the name of a sample folder 
    % (which should be the name of the initial image)
    function [sampleIdx,conditionIdx] = getSampleIdx(obj,cName,sName)
        conditionIdx = find(ismember( obj.conditionNames,cName));
        sampleIdx = find(ismember( obj.sampleNames{conditionIdx},sName));
    end

    %% get the list of expected files to be generated by a complete
    % analysis of the eggChamber data (only channel-independent files).
    function fNames = expectedEggChamberAnalysisFilesChannelIndependentFiles(obj)
        fNames = obj.eggChamberWiseFileNames(...
            ~obj.eggChamberWiseChannelDependent);
    end

    %% get the list of expected files to be generated by the
    % analysis of the eggChamber data for a specific channel .
    function fNames = expectedEggChamberAnalysisFilesChannelFiles(obj,channelIdx)
       
        nameList = obj.eggChamberWiseFileNames(...
            obj.eggChamberWiseChannelDependent);

        fNames = {};
        for i=1:numel( nameList )
            fNames = [fNames; ['C',num2str(channelIdx),nameList{i}] ];
        end
    end
    
    %% get the complete list of expected files to be generated by a complete
    % analysis of the eggChamber data. All channels + channel
    % independent files.
    function fNames = expectedEggChamberAnalysisFilesFullList(obj,nChannels)
        fNames = ...
            obj.expectedEggChamberAnalysisFilesChannelIndependentFiles;

        for i=1:nChannels
            fNames = [fNames; ...
                obj.expectedEggChamberAnalysisFilesChannelFiles(i)];
        end
    end
    
    %% get the name of the folder holding the eggChamber related csv files.
    function analysisDir = getEggChamberAnalysisDir(obj,conditionIdx,sampleIdx)
        if isempty(obj.conditionNames)
            disp('condition folder appears empty.');
            analysisDir = [];
            return ;
        end
        analysisDir = fullfile(obj.inFolder,...
            obj.conditionNames{conditionIdx},...
            obj.sampleNames{conditionIdx}{sampleIdx},...
            obj.eggChamberCsvFolderName);
    end

    function eggSegDir = getEggChamberSegDir(obj,conditionIdx,sampleIdx)
        if isempty(obj.conditionNames)
            disp('condition appears empty.');
            eggSegDir = [];
            return ;
        end
        eggSegDir = fullfile(obj.inFolder,...
            obj.conditionNames{conditionIdx},...
            obj.sampleNames{conditionIdx}{sampleIdx},...
            obj.eggChamberSegFolderName);
    end
    
    %% check whether all files expected from the analysis of the 
    % eggchamber data are present in the analysis folder
    function [channelsFound,eggChamberSegFound] = areEggChamberAnalysisFilesPresent(obj,...
                            conditionIdx,sampleIdx)

        % arbitrary max number of channels to check
        maxChannels = 10;

        % check that the analysis dir is present
        analysisDir = obj.getEggChamberAnalysisDir(conditionIdx,sampleIdx);
        
        if ~exist(analysisDir, 'dir')
            channelsFound = 0;
            eggChamberSegFound = 0;
            return;
        end

        % check that the egg chamber seg dir is present
        eggSegDir = obj.getEggChamberSegDir(conditionIdx,sampleIdx);
        
        if ~exist(eggSegDir, 'dir')
            eggChamberSegFound = 0;
        else
            if exist(fullfile(eggSegDir,obj.eggChamberSegFileName), 'file')
                eggChamberSegFound = 1;
            else
                eggChamberSegFound = 0;
            end
        end
        
        % check that channel-independent analysis files exist
        fNames = ...
            obj.expectedEggChamberAnalysisFilesChannelIndependentFiles;
        flag = 1;
        for i=1:numel(fNames)
            if ~exist(fullfile(analysisDir,fNames{i}),'file')
               flag = 0;
            end
        end
        if flag == 0
            channelsFound = 0;
            return;
        end

        % check that channel analysis files exist
        channelsFound = 0;
        for i=1:maxChannels
            fNames = ...
                obj.expectedEggChamberAnalysisFilesChannelFiles(i);
            flag = 1;
            for j=1:numel(fNames)
                if ~exist(fullfile(analysisDir,fNames{j}),'file')
                   flag = 0;
                end
            end
            if flag == 1
                channelsFound = i;
            end
        end
    end
    
    %% load the tables corresponding to one sample
    % conditionIDx, sampleIdx relative to conditionNames and
    % sampleNames cell arrays. 
    % removeNeighbors is a flag - set to 1 to remove variables that contain the word neighbor
    % (these are generated by Fiji but tend to not be useful for our
    % analyses).
    function t = loadEggChamberData(obj,conditionIdx,sampleIdx,removeNeighbors)
        
        % check that data is present
        [c,eggSegFound] = obj.areEggChamberAnalysisFilesPresent(conditionIdx,sampleIdx);
        if c == 0
            t = [];
            return
        end
        
        % if there is an egg chamber segmentation file and the channel isnt set yet (i.e. defaulted to zero),
        % prompt the user for the channel that holds the egg Chamber ID,
        % and store it under eggChamberSegChannel property.
        if eggSegFound && (obj.eggChamberSegChannel == 0)
            % assume the egg chamber segmentation channel is the last
            % channel
            prompt = ['Egg Chamber Stage File found - Should I use the last channel ('...
                            ,num2str(c),') as the egg chamber ID? Y/N [Y]: '];
            txt = input(prompt,"s");
            if isempty(txt)
                txt = 'Y';
            end
            if strcmpi(txt,'Y')
                obj.eggChamberSegChannel = c;
            else
                prompt = ['What is the egg chamber ID channel (integer 1-',num2str(c),') ? '];
                
                if(obj.eggChamberSegChannel<1 || obj.eggChamberSegChannel>c ...
                        || (floor(obj.eggChamberSegChannel) ~= obj.eggChamberSegChannel))
                    disp('Channel needs to be an integer, using last channel instead');
                    obj.eggChamberSegChannel = c;
                else
                    obj.eggChamberSegChannel = input(prompt);
                end
            end
        end

        analysisDir = obj.getEggChamberAnalysisDir(conditionIdx,sampleIdx);
        
        tS = []; % full table place holder for data that is single row 
        % - e.g. whole image intensity, whole egg chamber intensity.
        t = []; % full table place holder for data that is mutli row
        % i.e. nucleus-specific 
        % loop through files, load each as a table curT and append the 
        % variables curT holds as new columns into t (or tS if single
        % row)
        for i=1:numel(obj.eggChamberWiseFileNames)
            if ~obj.eggChamberWiseChannelDependent(i)
                % load table
                curT = readtable( fullfile(analysisDir,...
                    obj.eggChamberWiseFileNames{i}) );
                
                % remove useless variable name (if present)
                if ismember('Var1',curT.Properties.VariableNames)
                    curT = removevars( curT,'Var1');
                end

                % add prefix and suffix to variable name
                for k=1:numel(curT.Properties.VariableNames)
                    if ~strcmp(curT.Properties.VariableNames{k},'Label')
                        curT.Properties.VariableNames{k} = ...
                            [obj.eggChamberWisePrefix{i},...
                            curT.Properties.VariableNames{k},...
                            obj.eggChamberWiseSuffix{i}];
                    end
                end
                
                % append to full table
                if obj.eggChamberWiseSingleRow(i)
                    if isempty(tS)
                        tS = curT;
                    else
                        tS = join(tS,curT,'Keys','Label');
                    end
                else
                    if isempty(t)
                        t = curT;
                    else
                        t = join(t,curT,'Keys','Label');
                    end
                end
            else
                for j=1:c
                    % load table
                    curT = readtable( fullfile(analysisDir,...
                        ['C',num2str(j),...
                        obj.eggChamberWiseFileNames{i}]) );
                    
                    % remove useless variable name (if present)
                    if ismember('Var1',curT.Properties.VariableNames)
                        curT = removevars( curT,'Var1');
                    end

                    % add prefix and suffix to variable name
                    for k=1:numel(curT.Properties.VariableNames)
                        if ~strcmp(curT.Properties.VariableNames{k},'Label')
                            curT.Properties.VariableNames{k} = ...
                                [obj.eggChamberWisePrefix{i},...
                                'C',num2str(j),'_',...
                                curT.Properties.VariableNames{k},...
                                obj.eggChamberWiseSuffix{i}];
                        end
                    end

                    % append to full table
                    if obj.eggChamberWiseSingleRow(i)
                        if isempty(tS)
                            tS = curT;
                        else
                            tS = join(tS,curT,'Keys','Label');
                        end
                    else
                        if isempty(t)
                            t = curT;
                        else
                            t = join(t,curT,'Keys','Label');
                        end
                    end
                end
            end
        end

        % combine single row table with nucleus-list table
        tS = repmat(tS,size(t,1),1);
        tS.Label = t.Label;
        t = join(t,tS,'Keys','Label');

        % rename Label variable to nucLabel
        t =renamevars(t,{'Label'},{'nucLabel'});

        % add condition and sample index variables
        cIdx = repmat(conditionIdx,size(t,1),1);
        sIdx = repmat(sampleIdx,size(t,1),1);
        t = addvars(t,cIdx,sIdx,...
            'NewVariableNames',{'condIdx','sampleIdx'},...
            'Before',1);

        % if egg chamber stage file is present, add a variable for the egg
        % chamber stage.
        if eggSegFound && (obj.eggChamberSegChannel ~= 0)
            % get the name of the variable holding the median nucleus
            % intensity in the channel that holds the egg chamber
            % segmenentation ID (the median int will be used as the ID).
            eggChamberIDVariable = [obj.eggChamberWisePrefix{2},'C',...
                num2str(obj.eggChamberSegChannel),'_Median',obj.eggChamberWiseSuffix{2}];
            
            % convert the egg chamber ID into and egg chamber stage based
            % on the key saved in the file.
            ecStage = obj.getEggChamberStageData(t.(eggChamberIDVariable),conditionIdx,sampleIdx);
            
            % copy the eggChamber variable with ean easy to interpret file
            % name
            t = addvars(t,t.(eggChamberIDVariable),...
            'NewVariableNames',{'eggChamberID'});

            % add egg Chamber stage variable to table
            t = addvars(t,ecStage,...
            'NewVariableNames',{'eggChamberStage'});
        end

        % remove variables that contain the word neighbor
        if removeNeighbors
            idx = cellfun(@contains,t.Properties.VariableNames,...
                repmat( {'Neighbors'},size(t.Properties.VariableNames) ),'UniformOutput',0);
            idx = cell2mat(idx);
            t = t(:,~idx);
        end
    end
    
    %% concatenate tables vertically. If variables are missing in one of the
    % tables, it is added with intialized defaulted values to zero or ''.
    % the order matches that of the variables in t1.
    function t = combineEcTables(~,t1, t2)

        if isempty(t1)
            t = t2;
            return;
        end

        if isempty(t2)
            t = t1;
            return;
        end

        % variable list for each table
        v1 = t1.Properties.VariableNames;
        v2 = t2.Properties.VariableNames;
        
        % list of numeric variables
        s = vartype('numeric');
        s1 = t1(:,s);
        v1num = s1.Properties.VariableNames;
        s2 = t2(:,s);
        v2num = s2.Properties.VariableNames;
        
        % add missing variables to each table so both tables have the same
        % complement of variables, order to match the order of the variables
        % in the other table - the order might break if more than one variable is
        % missing.
        v12 = setdiff(v1,v2);
        if ~isempty(v12)
            for i=1:numel(v12)
                if ismember(v12{i},v1num)
                    newVar = zeros(size(t2,1),1);
                else
                    newVar = repmat({''},size(t2,1),1);
                end
    
                idx = find(ismember(v1,v12{i}));
                if idx == 1
                    if ismember(v1{2},v2)
                        t2 = addvars(t2,newVar,'NewVariableNames',v12(i),'Before',v1{2});
                    else
                        t2 = addvars(t2,newVar,'NewVariableNames',v12(i));
                    end
                    v2 = t2.Properties.VariableNames;
                else
                    if ismember(v1{idx-1},v2)
                        t2 = addvars(t2,newVar,'NewVariableNames',v12(i),'After',v1{idx-1});
                    else
                        t2 = addvars(t2,newVar,'NewVariableNames',v12(i));
                    end
                    v2 = t2.Properties.VariableNames;
                end          
            end
        end
    
        v21 = setdiff(v2,v1);
        if ~isempty(v21)
            for i=1:numel(v21)
                if ismember(v21{i},v2num)
                    newVar = zeros(size(t1,1),1);
                else
                    newVar = repmat({''},size(t1,1),1);
                end
    
                idx = find(ismember(v2,v21{i}));
                if idx == 1
                    if ismember(v2{2},v1)
                        t1 = addvars(t1,newVar,'NewVariableNames',v21(i),'Before',v2{2});
                    else
                        t1 = addvars(t1,newVar,'NewVariableNames',v21(i));
                    end
                    v1 = t1.Properties.VariableNames;
                else
                    if ismember(v2{idx-1},v1)
                        t1 = addvars(t1,newVar,'NewVariableNames',v21(i),'After',v2{idx-1});
                    else
                        t1 = addvars(t1,newVar,'NewVariableNames',v21(i));
                    end
                    v1 = t1.Properties.VariableNames;
                end          
            end
        end
    
        
        % re-order variables in t2 to match the order in t1 if needed
        v1 = t1.Properties.VariableNames;
        v2 = t2.Properties.VariableNames;
    
        idx12 = zeros(numel(v1,1));
        for i=1:numel(v1)
            idx12(i) = find(ismember(v2,v1(i)));
        end
    
        t2 = t2(:,idx12);
        t = [t1;t2];
    
    end

    function ecStage = getEggChamberStageData(obj, eggChamberID,conditionIdx,sampleIdx)
        % load cell stage key file
        eggSegDir = obj.getEggChamberSegDir(conditionIdx,sampleIdx);
        ecStageFile = fullfile(eggSegDir,obj.eggChamberSegFileName);

        % reads the egg chamber stage key file as a 2-column table w
        % variable names eggChamberID and eggChamberStage.
        t = readtable(ecStageFile);

        % convert key file to Containers.map object.
        ecMap = containers.Map(t.eggChamberID,t.eggChamberStage);
        ecStage = zeros(numel(eggChamberID),1);
        ecVals = unique(eggChamberID);
        for i=1:numel(ecVals)
            if ~isKey(ecMap,ecVals(i))
                ecStage(eggChamberID==ecVals(i)) = 0;
            else
                ecStage(eggChamberID==ecVals(i)) = cell2mat(values(ecMap,{ecVals(i)}));
            end
        end
    end
end

end