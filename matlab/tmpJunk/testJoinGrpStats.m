obj = ec;
minClustVolume = hlbMinVol;
maxClustVolume = Inf;

%minClustVolume = hlbMinVol/50;
%maxClustVolume = hlbMinVol/5;

numClustersVarName = ['nClusters',num2str(minClustVolume),'_',num2str(maxClustVolume)];
numClustersVarName = strrep(numClustersVarName,'.','pt');

c = obj.clustT;
n = newNucTable;
%n = ec.nucFullT; 

% remove all the cluster values outside of the volume range
idxClusters = c.clust_Volume >= minClustVolume...
              & c.clust_Volume <= maxClustVolume;

c = c(idxClusters,:);

%% collect all the variables from the cluster table except those that were
% lifted from the nucleus table, using prefixes as filters for varibale
% names
varsToExclude = ismember(c.Properties.VariableNames,{'clust_Label'});
prefixList = {'nuc_','sampleROI_','wholeImg_','eggChamber_','eggChamber_','plasm_','nucleoli_'};
for i=1:numel(prefixList)
    varsToExclude = varsToExclude  | ...
        cellfun(@startsWith,...
        c.Properties.VariableNames,repmat(prefixList(i),...
        size(c.Properties.VariableNames)));
end

% retain the few variables that are important but have forbiden prefixes
varsToExclude(ismember(c.Properties.VariableNames,{'nuc_Label'})) = 0;
varsToExclude(ismember(c.Properties.VariableNames,{'eggChamber_Idx'})) = 0;
varsToExclude(ismember(c.Properties.VariableNames,{'eggChamber_Stage'})) = 0;

% filter out excluded variables from cluster table
c = c(:,~varsToExclude);

%% average each cluster metric across each nucleus
c = grpstats(c,...
                ["cond_Idx","sample_Idx","sample_InputFileName",...
                "eggChamber_Idx","eggChamber_Stage","nuc_Label"],...
                ["mean","std"]);

% rename the variable holding the number of clusters in each nucleus "nClusters"
c = renamevars(c,{'GroupCount'},numClustersVarName);

% remove from the averaged table the new row names created by the grpstats function
c.Properties.RowNames = {}; 

%% replace prefixes mean_ and std_ by nucAvgClust<MinVol>_<MaxVol>_ and nucStdClust<MinVol>_<maxVol>_
prefixList1 ={'mean_','std_'}; % prefix to replace in t (generated by grpstats)
prefixList2 ={'Avg','Std'}; % corresponding name of the metric in new variable
for i=1:numel(prefixList1)
    vIn = c.Properties.VariableNames(cellfun(@startsWith,c.Properties.VariableNames,repmat(prefixList1(i),...
            size(c.Properties.VariableNames))));
    vOut = cellfun(@strrep,vIn,repmat(prefixList1(i),size(vIn)),...
        repmat({[['nuc',prefixList2{i},'Clust'],num2str(minClustVolume),'_',num2str(maxClustVolume),'_']},size(vIn)),...
        'UniformOutput',0);
    c = renamevars(c, vIn,vOut);
end

%% add rows for nuclei which do not contain clusters
 
% find unique combos of nuclei IDs present in nucleus table but absent in
% cluster table
% "cond_Idx","sample_Idx","sample_InputFileName","eggChamber_Idx","eggChamber_Stage","nuc_Label"
idCols = ["cond_Idx","sample_Idx","sample_InputFileName","eggChamber_Idx","eggChamber_Stage","nuc_Label"];
idxNucCols = ismember(n.Properties.VariableNames,idCols);
idxClustCols = ismember(c.Properties.VariableNames,idCols);
missingNucs = setdiff( unique( n(:,idxNucCols) ,'rows'),...
    unique( c(:,idxClustCols) ,'rows'));

% generate a new table with the same column as the cluster table
if isempty(c)
    newNucs = array2table(zeros(size(missingNucs,1),size(c,2)), 'VariableNames',c.Properties.VariableNames);
else
    newNucs = repmat(c(1,:),size(missingNucs,1),1);
end

% initialize all values to NaN or '', except number of clusters set to 0
numericVars = varfun(@isnumeric,newNucs,'output','uniform');
newNucs{:,numericVars} = NaN;
newNucs(:,~numericVars) = {''};
newNucs.(numClustersVarName)(:) = 0;

% enter the labels corresponding to the nuclei without clusters
for i=1:numel(idCols)
    newNucs.(idCols{i}) = missingNucs.(idCols{i});
end

% combine the missing nuclei with t
t2 = [c;newNucs];

%% join the averaged cluster metrics with the nucleus metrics table
% join the averaged metrics with the nucleus table
newNucTable = join(n,t2,"Keys",...
    ["cond_Idx","sample_Idx","sample_InputFileName",...
    "eggChamber_Idx","eggChamber_Stage","nuc_Label"]);

%% re-order key variables to the left for easier browsing of the table

% place the sample file name in first position
if find(ismember(newNucTable.Properties.VariableNames,'sample_InputFileName') ) ~= 1
    newNucTable = movevars(newNucTable, {'sample_InputFileName'},'Before',1);
end

% place the number of clusters in the nucleus right after the first 5
% variables:
% "sample_InputFileName" "cond_Idx" "sample_Idx" "nuc_Label" "nuc_Volume"
if find(ismember(newNucTable.Properties.VariableNames,numClustersVarName) ) ~= 6
    newNucTable = movevars(newNucTable, {numClustersVarName},'After',5);
end
